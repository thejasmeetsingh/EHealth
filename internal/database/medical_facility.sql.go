// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: medical_facility.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createMedicalFacility = `-- name: CreateMedicalFacility :one
INSERT INTO medical_facility (
    id,
    created_at,
    modified_at,
    type,
    name,
    description,
    email,
    mobile_number,
    charges,
    address,
    location,
    user_id
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
RETURNING id, created_at, modified_at, type, name, description, email, mobile_number, charges, address, location, user_id
`

type CreateMedicalFacilityParams struct {
	ID           uuid.UUID
	CreatedAt    time.Time
	ModifiedAt   time.Time
	Type         FacilityType
	Name         string
	Description  sql.NullString
	Email        string
	MobileNumber string
	Charges      string
	Address      string
	Location     interface{}
	UserID       uuid.UUID
}

func (q *Queries) CreateMedicalFacility(ctx context.Context, arg CreateMedicalFacilityParams) (MedicalFacility, error) {
	row := q.db.QueryRowContext(ctx, createMedicalFacility,
		arg.ID,
		arg.CreatedAt,
		arg.ModifiedAt,
		arg.Type,
		arg.Name,
		arg.Description,
		arg.Email,
		arg.MobileNumber,
		arg.Charges,
		arg.Address,
		arg.Location,
		arg.UserID,
	)
	var i MedicalFacility
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.Type,
		&i.Name,
		&i.Description,
		&i.Email,
		&i.MobileNumber,
		&i.Charges,
		&i.Address,
		&i.Location,
		&i.UserID,
	)
	return i, err
}

const getMedicalFacilityById = `-- name: GetMedicalFacilityById :one
SELECT id, created_at, modified_at, type, name, description, email, mobile_number, charges, address, location, user_id FROM medical_facility WHERE id=$1
`

func (q *Queries) GetMedicalFacilityById(ctx context.Context, id uuid.UUID) (MedicalFacility, error) {
	row := q.db.QueryRowContext(ctx, getMedicalFacilityById, id)
	var i MedicalFacility
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.Type,
		&i.Name,
		&i.Description,
		&i.Email,
		&i.MobileNumber,
		&i.Charges,
		&i.Address,
		&i.Location,
		&i.UserID,
	)
	return i, err
}

const getMedicalFacilityByUserId = `-- name: GetMedicalFacilityByUserId :one
SELECT id, created_at, modified_at, type, name, description, email, mobile_number, charges, address, location, user_id FROM medical_facility WHERE user_id=$1
`

func (q *Queries) GetMedicalFacilityByUserId(ctx context.Context, userID uuid.UUID) (MedicalFacility, error) {
	row := q.db.QueryRowContext(ctx, getMedicalFacilityByUserId, userID)
	var i MedicalFacility
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.Type,
		&i.Name,
		&i.Description,
		&i.Email,
		&i.MobileNumber,
		&i.Charges,
		&i.Address,
		&i.Location,
		&i.UserID,
	)
	return i, err
}

const updateMedicalFacility = `-- name: UpdateMedicalFacility :one
UPDATE medical_facility SET
type=$1,
name=$2,
description=$3,
email=$4,
mobile_number=$5,
charges=$6,
address=$7,
location=$8
WHERE id=$9 RETURNING id, created_at, modified_at, type, name, description, email, mobile_number, charges, address, location, user_id
`

type UpdateMedicalFacilityParams struct {
	Type         FacilityType
	Name         string
	Description  sql.NullString
	Email        string
	MobileNumber string
	Charges      string
	Address      string
	Location     interface{}
	ID           uuid.UUID
}

func (q *Queries) UpdateMedicalFacility(ctx context.Context, arg UpdateMedicalFacilityParams) (MedicalFacility, error) {
	row := q.db.QueryRowContext(ctx, updateMedicalFacility,
		arg.Type,
		arg.Name,
		arg.Description,
		arg.Email,
		arg.MobileNumber,
		arg.Charges,
		arg.Address,
		arg.Location,
		arg.ID,
	)
	var i MedicalFacility
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.Type,
		&i.Name,
		&i.Description,
		&i.Email,
		&i.MobileNumber,
		&i.Charges,
		&i.Address,
		&i.Location,
		&i.UserID,
	)
	return i, err
}
