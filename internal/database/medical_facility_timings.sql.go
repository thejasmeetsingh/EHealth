// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: medical_facility_timings.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addMedicalFacilityTimings = `-- name: AddMedicalFacilityTimings :one
INSERT INTO medical_facility_timings (
    id,
    created_at,
    modified_at,
    medical_facility_id,
    weekday,
    start_datetime,
    end_datetime
) VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, created_at, modified_at, medical_facility_id, weekday, start_datetime, end_datetime
`

type AddMedicalFacilityTimingsParams struct {
	ID                uuid.UUID
	CreatedAt         time.Time
	ModifiedAt        time.Time
	MedicalFacilityID uuid.UUID
	Weekday           WeekdayType
	StartDatetime     time.Time
	EndDatetime       time.Time
}

func (q *Queries) AddMedicalFacilityTimings(ctx context.Context, arg AddMedicalFacilityTimingsParams) (MedicalFacilityTiming, error) {
	row := q.db.QueryRowContext(ctx, addMedicalFacilityTimings,
		arg.ID,
		arg.CreatedAt,
		arg.ModifiedAt,
		arg.MedicalFacilityID,
		arg.Weekday,
		arg.StartDatetime,
		arg.EndDatetime,
	)
	var i MedicalFacilityTiming
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.MedicalFacilityID,
		&i.Weekday,
		&i.StartDatetime,
		&i.EndDatetime,
	)
	return i, err
}

const getMedicalFacilityTimingById = `-- name: GetMedicalFacilityTimingById :one
SELECT id, created_at, modified_at, medical_facility_id, weekday, start_datetime, end_datetime FROM medical_facility_timings WHERE id=$1
`

func (q *Queries) GetMedicalFacilityTimingById(ctx context.Context, id uuid.UUID) (MedicalFacilityTiming, error) {
	row := q.db.QueryRowContext(ctx, getMedicalFacilityTimingById, id)
	var i MedicalFacilityTiming
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.MedicalFacilityID,
		&i.Weekday,
		&i.StartDatetime,
		&i.EndDatetime,
	)
	return i, err
}

const getMedicalFacilityTimingDetails = `-- name: GetMedicalFacilityTimingDetails :many
SELECT id, created_at, modified_at, medical_facility_id, weekday, start_datetime, end_datetime FROM medical_facility_timings WHERE medical_facility_id=$1
`

func (q *Queries) GetMedicalFacilityTimingDetails(ctx context.Context, medicalFacilityID uuid.UUID) ([]MedicalFacilityTiming, error) {
	rows, err := q.db.QueryContext(ctx, getMedicalFacilityTimingDetails, medicalFacilityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MedicalFacilityTiming
	for rows.Next() {
		var i MedicalFacilityTiming
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.ModifiedAt,
			&i.MedicalFacilityID,
			&i.Weekday,
			&i.StartDatetime,
			&i.EndDatetime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMedicalFacilityTimings = `-- name: UpdateMedicalFacilityTimings :one
UPDATE medical_facility_timings SET
weekday=$1,
start_datetime=$2,
end_datetime=$3
WHERE id=$4 
RETURNING id, created_at, modified_at, medical_facility_id, weekday, start_datetime, end_datetime
`

type UpdateMedicalFacilityTimingsParams struct {
	Weekday       WeekdayType
	StartDatetime time.Time
	EndDatetime   time.Time
	ID            uuid.UUID
}

func (q *Queries) UpdateMedicalFacilityTimings(ctx context.Context, arg UpdateMedicalFacilityTimingsParams) (MedicalFacilityTiming, error) {
	row := q.db.QueryRowContext(ctx, updateMedicalFacilityTimings,
		arg.Weekday,
		arg.StartDatetime,
		arg.EndDatetime,
		arg.ID,
	)
	var i MedicalFacilityTiming
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.MedicalFacilityID,
		&i.Weekday,
		&i.StartDatetime,
		&i.EndDatetime,
	)
	return i, err
}
