// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: bookings.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createBooking = `-- name: CreateBooking :one
INSERT INTO bookings (id, created_at, modified_at, medical_facility_id, user_id, start_datetime, end_datetime, status) 
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, created_at, modified_at, medical_facility_id, user_id, start_datetime, end_datetime, status
`

type CreateBookingParams struct {
	ID                uuid.UUID
	CreatedAt         time.Time
	ModifiedAt        time.Time
	MedicalFacilityID uuid.UUID
	UserID            uuid.UUID
	StartDatetime     time.Time
	EndDatetime       time.Time
	Status            BookingStatus
}

func (q *Queries) CreateBooking(ctx context.Context, arg CreateBookingParams) (Booking, error) {
	row := q.db.QueryRowContext(ctx, createBooking,
		arg.ID,
		arg.CreatedAt,
		arg.ModifiedAt,
		arg.MedicalFacilityID,
		arg.UserID,
		arg.StartDatetime,
		arg.EndDatetime,
		arg.Status,
	)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.MedicalFacilityID,
		&i.UserID,
		&i.StartDatetime,
		&i.EndDatetime,
		&i.Status,
	)
	return i, err
}

const getBooking = `-- name: GetBooking :one
SELECT id, created_at, modified_at, medical_facility_id, user_id, start_datetime, end_datetime, status FROM bookings WHERE id=$1
`

func (q *Queries) GetBooking(ctx context.Context, id uuid.UUID) (Booking, error) {
	row := q.db.QueryRowContext(ctx, getBooking, id)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.MedicalFacilityID,
		&i.UserID,
		&i.StartDatetime,
		&i.EndDatetime,
		&i.Status,
	)
	return i, err
}

const getMedicalFacilityBookings = `-- name: GetMedicalFacilityBookings :many
SELECT id, created_at, modified_at, medical_facility_id, user_id, start_datetime, end_datetime, status FROM bookings WHERE medical_facility_id=$1 AND status=$2 LIMIT $3 OFFSET $4
`

type GetMedicalFacilityBookingsParams struct {
	MedicalFacilityID uuid.UUID
	Status            BookingStatus
	Limit             int32
	Offset            int32
}

func (q *Queries) GetMedicalFacilityBookings(ctx context.Context, arg GetMedicalFacilityBookingsParams) ([]Booking, error) {
	rows, err := q.db.QueryContext(ctx, getMedicalFacilityBookings,
		arg.MedicalFacilityID,
		arg.Status,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Booking
	for rows.Next() {
		var i Booking
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.ModifiedAt,
			&i.MedicalFacilityID,
			&i.UserID,
			&i.StartDatetime,
			&i.EndDatetime,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserBookings = `-- name: GetUserBookings :many
SELECT id, created_at, modified_at, medical_facility_id, user_id, start_datetime, end_datetime, status FROM bookings WHERE user_id=$1 AND status=$2 LIMIT $3 OFFSET $4
`

type GetUserBookingsParams struct {
	UserID uuid.UUID
	Status BookingStatus
	Limit  int32
	Offset int32
}

func (q *Queries) GetUserBookings(ctx context.Context, arg GetUserBookingsParams) ([]Booking, error) {
	rows, err := q.db.QueryContext(ctx, getUserBookings,
		arg.UserID,
		arg.Status,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Booking
	for rows.Next() {
		var i Booking
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.ModifiedAt,
			&i.MedicalFacilityID,
			&i.UserID,
			&i.StartDatetime,
			&i.EndDatetime,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const overlappingAcceptedBookingCount = `-- name: OverlappingAcceptedBookingCount :one
SELECT COUNT(id) FROM bookings WHERE (start_datetime, end_datetime) OVERLAPS ($1, $2) AND status='A' AND medical_facility_id=$3
`

type OverlappingAcceptedBookingCountParams struct {
	Overlaps          interface{}
	Overlaps_2        interface{}
	MedicalFacilityID uuid.UUID
}

func (q *Queries) OverlappingAcceptedBookingCount(ctx context.Context, arg OverlappingAcceptedBookingCountParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, overlappingAcceptedBookingCount, arg.Overlaps, arg.Overlaps_2, arg.MedicalFacilityID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const overlappingPendingBookings = `-- name: OverlappingPendingBookings :many
SELECT b.id, b.start_datetime, b.end_datetime, mf.name, mf.address, u.email FROM bookings b 
JOIN medical_facility mf ON b.medical_facility_id=mf.id
JOIN users u ON b.user_id=u.id
WHERE (b.start_datetime, b.end_datetime) OVERLAPS ($1, $2) AND status='P' AND b.medical_facility_id=$3 AND b.id!=$4
`

type OverlappingPendingBookingsParams struct {
	Overlaps          interface{}
	Overlaps_2        interface{}
	MedicalFacilityID uuid.UUID
	ID                uuid.UUID
}

type OverlappingPendingBookingsRow struct {
	ID            uuid.UUID
	StartDatetime time.Time
	EndDatetime   time.Time
	Name          string
	Address       string
	Email         string
}

func (q *Queries) OverlappingPendingBookings(ctx context.Context, arg OverlappingPendingBookingsParams) ([]OverlappingPendingBookingsRow, error) {
	rows, err := q.db.QueryContext(ctx, overlappingPendingBookings,
		arg.Overlaps,
		arg.Overlaps_2,
		arg.MedicalFacilityID,
		arg.ID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OverlappingPendingBookingsRow
	for rows.Next() {
		var i OverlappingPendingBookingsRow
		if err := rows.Scan(
			&i.ID,
			&i.StartDatetime,
			&i.EndDatetime,
			&i.Name,
			&i.Address,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBookingStatus = `-- name: UpdateBookingStatus :one
UPDATE bookings SET status=$1 WHERE id=$2
RETURNING id, created_at, modified_at, medical_facility_id, user_id, start_datetime, end_datetime, status
`

type UpdateBookingStatusParams struct {
	Status BookingStatus
	ID     uuid.UUID
}

func (q *Queries) UpdateBookingStatus(ctx context.Context, arg UpdateBookingStatusParams) (Booking, error) {
	row := q.db.QueryRowContext(ctx, updateBookingStatus, arg.Status, arg.ID)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.MedicalFacilityID,
		&i.UserID,
		&i.StartDatetime,
		&i.EndDatetime,
		&i.Status,
	)
	return i, err
}
