// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type BookingStatus string

const (
	BookingStatusP BookingStatus = "P"
	BookingStatusA BookingStatus = "A"
	BookingStatusR BookingStatus = "R"
)

func (e *BookingStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BookingStatus(s)
	case string:
		*e = BookingStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for BookingStatus: %T", src)
	}
	return nil
}

type NullBookingStatus struct {
	BookingStatus BookingStatus
	Valid         bool // Valid is true if BookingStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBookingStatus) Scan(value interface{}) error {
	if value == nil {
		ns.BookingStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.BookingStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBookingStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.BookingStatus), nil
}

type FacilityType string

const (
	FacilityTypeID FacilityType = "ID"
	FacilityTypeC  FacilityType = "C"
	FacilityTypeH  FacilityType = "H"
)

func (e *FacilityType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = FacilityType(s)
	case string:
		*e = FacilityType(s)
	default:
		return fmt.Errorf("unsupported scan type for FacilityType: %T", src)
	}
	return nil
}

type NullFacilityType struct {
	FacilityType FacilityType
	Valid        bool // Valid is true if FacilityType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFacilityType) Scan(value interface{}) error {
	if value == nil {
		ns.FacilityType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.FacilityType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFacilityType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.FacilityType), nil
}

type WeekdayType string

const (
	WeekdayType0 WeekdayType = "0"
	WeekdayType1 WeekdayType = "1"
	WeekdayType2 WeekdayType = "2"
	WeekdayType3 WeekdayType = "3"
	WeekdayType4 WeekdayType = "4"
	WeekdayType5 WeekdayType = "5"
	WeekdayType6 WeekdayType = "6"
)

func (e *WeekdayType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = WeekdayType(s)
	case string:
		*e = WeekdayType(s)
	default:
		return fmt.Errorf("unsupported scan type for WeekdayType: %T", src)
	}
	return nil
}

type NullWeekdayType struct {
	WeekdayType WeekdayType
	Valid       bool // Valid is true if WeekdayType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullWeekdayType) Scan(value interface{}) error {
	if value == nil {
		ns.WeekdayType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.WeekdayType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullWeekdayType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.WeekdayType), nil
}

type Booking struct {
	ID                uuid.UUID
	CreatedAt         time.Time
	ModifiedAt        time.Time
	MedicalFacilityID uuid.UUID
	UserID            uuid.UUID
	StartDatetime     time.Time
	EndDatetime       time.Time
	Status            BookingStatus
}

type MedicalFacility struct {
	ID           uuid.UUID
	CreatedAt    time.Time
	ModifiedAt   time.Time
	Type         FacilityType
	Name         string
	Description  sql.NullString
	Email        string
	MobileNumber string
	Charges      string
	Address      string
	Location     interface{}
	UserID       uuid.UUID
}

type MedicalFacilityTiming struct {
	ID                uuid.UUID
	CreatedAt         time.Time
	ModifiedAt        time.Time
	MedicalFacilityID uuid.UUID
	Weekday           WeekdayType
	StartDatetime     time.Time
	EndDatetime       time.Time
}

type User struct {
	ID         uuid.UUID
	CreatedAt  time.Time
	ModifiedAt time.Time
	Email      string
	Password   string
	Name       sql.NullString
	IsEndUser  bool
}
